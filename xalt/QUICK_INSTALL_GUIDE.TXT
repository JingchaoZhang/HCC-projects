
##############################################################################
#                                                                            #
#                      QUICK INSTALLATION GUIDE FOR XALT                     #
#                                                                            #
##############################################################################


It is easiest if one installs all of the pre-requisite software (lua and lmod)
and XALT in the same directory. In this guide, we will call this directory
XALT_DIR.

0. Set the environment variable XALT_DIR to the desired install location. We
also need to set LMOD_DIR, XALT_ETC_DIR, and PATH to include the bin/
directory in the install location.

Bash    : "export XALT_DIR=<installation dir>"
C-shell " "setenv XALT_DIR <installation dir>"

and similarly:
$> export XALT_ETC_DIR=$XALT_DIR/etc
$> export LMOD_DIR=$XALT_DIR
$> export PATH=$XALT_DIR/bin:$PATH

These guarantee that various components (e.g. lua executable, Lmod
utilities) are found in these next steps.

The steps are divided into three sections:
I.   Pre-requisite steps where we install Lua and Lmod needed by XALT
II.  XALT installation itself
III. Post installation step to configure XALT


I. PRE-REQUISITE: Lua and Lmod
------------------------------------------------------------------------------

Lua and Lmod is required to associate modulefile with the tracked library, 
and to track the external functions (subroutines) resolved to the library. 

1. Download Lmod and  Lua version from Lmod's sourceforge page
(http://sourceforge.net/projects/lmod/), which already include
"luafilesystem" and "luaposix" required by Lmod. The direct link is:

http://sourceforge.net/projects/lmod/files/

(One could use / install Lua from its upstream project, but then one would
also need to build "luafilesystem" and "luaposix". Using Lua version from
Lmod sourceforge page is easiest.)


2. Un-tar, configure, and install, then add the installation to PATH

$> tar -xf lua-<version>.tar.gz
$> cd lua-<version>/
$> ./configure --prefix=$XALT_DIR
$> make && make install


3. Download and install Lmod

$> tar -xf Lmod-<version>.tar.bz2
$> ./configure --prefix=$XALT_DIR
$> make install


II. XALT INSTALLATION 
------------------------------------------------------------------------------

4. Download XALT, from either its Sourceforge page:
http://sourceforge.net/projects/xalt/files

or from its GitHub page
https://github.com/Fahey-McLay/xalt

To clone from its GitHub repository:
$> git clone https://github.com/Fahey-McLay/xalt.git


5. Change directory to XALT (after untar-ing), configure, then install

$> cd xalt
$> ./configure --prefix=$XALT_DIR --with-etcDir=$XALT_ETC_DIR
$> make 
$> make install


6. At this point, remove job launchers which are not supported on the system.
For example, on a Cray system, since the only supported job launcher is
"aprun", we remove everything else:

$> cd $XALT_DIR/bin
$> rm ibrun* mpirun mpiexec srun

One may remove different executable depending on what is supported on the
platform.


7. Build file for ReverseMap and libmap. ReverseMap associates libraries 
/ objectfiles with modulefile that specifies them. Libmap lists the 
library files (.a and .so) whose call to their function will be tracked by
/ XALT. ReverseMap and Libmap are stored in the same file.

On cluster this is often as simple as:
$> $LMOD_DIR/lmod/lmod/libexec/spider -o jsonReverseMapT $MODULEPATH \
   > ${XALT_ETC_DIR}/reverseMapD/jsonReverseMapT.json

It is important to use the same filename and directory "reverseMapD" as they
are used by convention in XALT.

On a Cray (XC, XE, XK), this is a bit more involved, so a script has been
provided under contrib/ directory in XALT source distribution to make this
easier. One can simply use this script and run:

$> xalt/contrib/build_reverseMapT_cray/cray_build_rmapT.sh $XALT_ETC_DIR

Once the ReverseMap file is built, add libmap to is using as:
$> $XALT_DIR/sbin/xalt_rmap_lmap.py 


8. Create file to hold database credentials
$> cd $XALT_ETC_DIR
$> python $XALT_DIR/sbin/conf_create.py #-- create xalt_db.conf

9. Create database and tables for XALT (need to be run from $XALT_ETC_DIR)
$> cd $XALT_ETC_DIR
$> python $XALT_DIR/sbin/createDB.py
In this step, make sure that the credential you created in step 8 has the
necessary privileges to create tables, etc. If you want the database
credential in general to be more restrictive, then redo step 8 with the less
privilege account after this step. 


III. POST INSTALLATION STEPS
---------------------------------------------------------------------

The next steps involve some manual configuration that varies depending on
the system, but the basic outline are explained below. 
are located in $XALT_DIR/site

8. Modify "$XALT_DIR/site/xalt_syshost_default.py"
The idea here is for XALT to get your syshost name. The included file can be
used as example. The command "python $XALT_DIR/site/xalt_syshost_default.py"
should return the name of the system as you want it recorded in XALT. 

9. Modify "$XALT_DIR/site/xalt_find_exec_<launcher>.py" if necessary. If your
MPI job launcher is already supported by XALT, most likely you do not need to 
do anything here. 

10. Create modulefile for XALT if you use modulefile environment. An example
of a basic modulefile is provided int the source distribution: 
xalt/contrib/xalt_modulefile
