#!/usr/bin/env python
# -*- python -*-

from __future__ import print_function, division
from __future__ import print_function
import os, sys, re, time, datetime, argparse, base64, MySQLdb
try:
  import configparser
except:
  import ConfigParser as configparser

def getTerminalSize():
  """
  Finds the terminal size if possible otherwise it assumes 25, 80
  @returns: lines  the number of rows
  @returns: cols   the number of columns
  """
  import os, struct
  def ioctl_GWINSZ(fd):
      import fcntl, termios
      return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
  # try stdin, stdout, stderr
  if (not sys.stdout.isatty()):
    return (25, 80)

  fd = 1
  try:
    return ioctl_GWINSZ(fd)
  except:
    pass
  # try os.ctermid()
  try:
    fd = os.open(os.ctermid(), os.O_RDONLY)
    try:
      return ioctl_GWINSZ(fd)
    finally:
      os.close(fd)
  except:
    pass
  # try `stty size`
  try:
    return tuple(int(x) for x in os.popen("stty size", "r").read().split())
  except:
    pass
  # try environment variables
  try:
    return tuple(int(os.getenv(var)) for var in ("LINES", "COLUMNS"))
  except:
    pass
  # i give up. return default.
  return (25, 80)

class ProgressBar(object):
  """ A progress bar display class """

  def __init__(self, termWidth=None, barWidth=None, maxVal=None, ttyOnly=False, fd=sys.stderr):
    """
    Ctor that figures out the range of the progress bar.
    @param termWidth: The terminal width
    @param barWidth:  The number of character that make up the bar
    @param maxVal:    The maximum value (required)
    @param ttyOnly:   If true then only print progress bar element if connected to a terminal.
    @param fd:        The output stream.
    """
    if (not maxVal):
      ValueError('Must specify maxVal')

    self.__maxVal = maxVal
    if (not barWidth):
      barWidth = termWidth
      if (not barWidth):
        r, barWidth = getTerminalSize()
        if (barWidth < 40):
          barWidth = 40

    barWidth = min(barWidth, self.__maxVal)

    self.__active   = True
    if (ttyOnly and not sys.stdout.isatty()):
      self.__active = False
      


    self.__fd       = fd
    self.__barWidth = barWidth

    self.__unit     = 100/self.__barWidth
    self.__fence    = self.__unit
    self.__mark     = 10
    self.__count    = -1
    self.__symbolT  = [ '+', '+', '+', '+', '|', '+', '+', '+', '+', '|' ]


  def update(self, i):
    """
    Update progress bar.
    @param i:  input value
    """

    if (not self.__active):
      return

    j = 100*i//self.__maxVal
    k = 100*(i+1)//self.__maxVal

    #print("i: ", i, "j: ",j,"k:",k, "fence: ", self.__fence,"mark:",self.__mark)

    if (j >= self.__fence):
      symbol = "-"
      if (( j <= self.__mark and k >= self.__mark) or
          ( j == k and j == self.__mark)         or
          (self.__fence > self.__mark)):
        
        self.__count +=  1
        self.__mark  += 10
        symbol = self.__symbolT[self.__count]
      self.__fd.write(symbol)
      self.__fence += self.__unit
  def fini(self):
    """ Finish progress bar output. """
    if (not self.__active):
      return
    self.__fd.write("\n")
        
      
class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    now    = time.time()
    parser = argparse.ArgumentParser()
    parser.add_argument("--dryrun",       dest='dryrun',       action="store_true",  default = None,          help="dryrun")
    parser.add_argument("--dbname",       dest='dbname',       action="store",       default = "xalt",        help="db name")
    parser.add_argument("--start",        dest='start',        action="store",       default = 0.0,           help="start date")
    parser.add_argument("--end",          dest='enddate',      action="store",       default = now,           help="end date")
    args = parser.parse_args()
    return args


def dbConfigFn(dbname):
  """
  Build config file name from dbname.
  @param dbname: db name
  """
  return dbname + "_db.conf"


def kill_dups(args, cursor):
  """
  @param args:     command line options
  @param cursor:   database accessor object
  @param acctT:    account record
  """

  if (type(args.start) == type("abc")):
    start = args.start
  else:
    start   = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(float(args.start)))

  if (type(args.enddate) == type("abc")):
    enddate = args.enddate
  else:
    enddate = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(float(args.enddate)))

  query = "select run_uuid, count(*) as num from xalt_run where date >= %s and date < %s group by run_uuid having num > 1 "
  cursor.execute(query,(start,enddate))

  print("number of dup run_uuid:",cursor.rowcount)

  rowA = cursor.fetchall()

  for row in rowA:
    run_uuid = row[0]
    num      = row[1]
    query = "select run_id from xalt_run where run_uuid = %s"
    cursor.execute(query, [run_uuid])
    j = 0
    for run_id in cursor:
      j += 1
      if (j == 1):
        continue
      if (args.dryrun):
        print("deleting run_id =",run_id,", num:",num)
      else:
        print("deleting run_id =",run_id,", num:",num)
        cursor.execute("START TRANSACTION")
        query = "delete from join_run_env where run_id = %s"
        cursor.execute(query,[run_id])
        query = "delete from join_run_object where run_id = %s"
        cursor.execute(query,[run_id])
        query = "delete from xalt_run where run_id = %s"
        cursor.execute(query,[run_id])
        cursor.execute("COMMIT")



def main():
  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  args         = CmdLineOptions().execute()
  config       = configparser.ConfigParser()     
  configFn     = dbConfigFn(os.path.join(XALT_ETC_DIR,args.dbname))
  config.read(configFn)

  conn = MySQLdb.connect \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")), \
          config.get("MYSQL","DB"))
  cursor = conn.cursor()

  kill_dups(args, cursor)
  

if ( __name__ == '__main__'): main()
