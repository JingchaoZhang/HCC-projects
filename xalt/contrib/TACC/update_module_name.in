#!/usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os, sys, re, time, datetime, argparse, MySQLdb, base64

dirNm, execName = os.path.split(os.path.realpath(sys.argv[0]))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../libexec")))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../site")))

from Rmap_XALT import Rmap
from xalt_util import *

try:
  import configparser
except:
  import ConfigParser as configparser

class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    now    = time.strftime("%Y-%m-%d")
    confFn = "xalt_db.conf"
    parser = argparse.ArgumentParser()
    parser.add_argument("--dryrun",       dest='dryrun',       action="store_true",  default = None,          help="dryrun")
    parser.add_argument("--confFn",       dest='confFn',       action="store" ,      default = confFn,        help="db name")
    parser.add_argument("--syshost",      dest='syshost',      action="store",       default = None,          help="system host name")
    parser.add_argument("--start",        dest='startDate',    action="store",       default = "1970-01-01",  help="start date")
    parser.add_argument("--end",          dest='endDate',      action="store",       default = now,           help="end date")
    parser.add_argument("--exclude_path", dest='exclude_path', action="append",                               help="exclude objects whose paths partially match EXCLUDE_PATH. This option can be specified multiple times.")
    args = parser.parse_args()
    return args


def update_module_name(args, tableName, idName, pathName, reverseMapT, cursor):

  cursor.execute("START TRANSACTION")
  
  query = "Select %s, %s from %s where module_name is NULL" % (
    idName, pathName, tableName)

  if (tableName == "xalt_run"):
    query = query + " AND date >= '%s' AND date < '%s'" % (
      args.startDate, args.endDate)

  if (args.syshost is not None):
    query = query + " AND syshost like '%s'" % args.syshost

  if (args.exclude_path is not None):
    for path in args.exclude_path:
      query = query + " AND %s not like '%%%s%%'" % (pathName, path)
  
  print(query)
  cursor.execute(query)
  resultA  = cursor.fetchall()
  n_update = 0
  for idx, path in resultA:
    module_name = obj2module(path, reverseMapT)
    if (module_name):
      n_update += 1
      if (args.dryrun):
        print ('path    : ' + path)
        print ('index   : ' + str(idx))
        print ('module  : ' + module_name)
        print ('SQL     : ' + query)
        print ('')
      else:
        query = "update "+tableName+" set module_name = %s where "+idName+" = %s" 
        cursor.execute(query, ( module_name, idx))
  if (args.dryrun):
    print ('Found %d entries out of %d to update' % (n_update, len(resultA)))
  else:
    cursor.execute("COMMIT")
    print ('Updated %d entries out of %d objects' % (n_update, len(resultA)))
  

def main():
  args     = CmdLineOptions().execute()
  config   = configparser.ConfigParser()     
  config.read(args.confFn)

  conn = MySQLdb.connect \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")), \
          config.get("MYSQL","DB"))
  cursor = conn.cursor()

  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  ConfigFn     = os.path.join(XALT_ETC_DIR,"xalt_db.conf")
  RMapFn       = os.path.join(XALT_ETC_DIR,"reverseMapD")
  reverseMapT  = Rmap(RMapFn).reverseMapT()
  
  update_module_name(args, "xalt_object", "obj_id", "object_path", reverseMapT, cursor)
  update_module_name(args, "xalt_run",    "run_id", "exec_path",   reverseMapT, cursor)
  

if ( __name__ == '__main__'): main()
  



