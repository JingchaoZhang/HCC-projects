#!/usr/bin/env python
# -*- python -*-

from __future__ import print_function, division
import os, sys, re, time, datetime, argparse, base64, MySQLdb, operator
try:
  import configparser
except:
  import ConfigParser as configparser

dirNm, execName = os.path.split(os.path.realpath(sys.argv[0]))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../libexec")))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../site")))

from BeautifulTbl              import BeautifulTbl
from xalt_transmission_factory import XALT_transmission_factory

      
class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    now       = time.strftime("%Y-%m-%d")
    outputdir = os.getcwd()
    parser    = argparse.ArgumentParser()
    confFn    = "xalt_db.conf"
    parser.add_argument("--dryrun",    dest='dryrun',    action="store_true", default = None,          help="dryrun")
    parser.add_argument("--confFn",    dest='confFn',    action="store",      default = confFn,        help="db name")
    parser.add_argument("--start",     dest='startDate', action="store",      default = "1970-01-01",  help="start date")
    parser.add_argument("--end",       dest='endDate',   action="store",      default = now,           help="end date")
    parser.add_argument("--syshost",   dest='syshost',   action="store",      default = "%",           help="syshost")
    parser.add_argument("--outputdir", dest='outputdir', action="store",      default = outputdir,     help="outputdir")

    args = parser.parse_args()
    return args

def export_links(conn, syshost, startDate, endDate, outputdir):
  cursorLnk = conn.cursor(MySQLdb.cursors.DictCursor)
  query     = "SELECT * \
               FROM   xalt_link \
               WHERE  build_syshost like %s \
               AND    date >= %s AND date < %s"
  cursorLnk.execute(query, (syshost, startDate, endDate))
  nRows     = cursorLnk.rowcount
  cursorObj = conn.cursor(MySQLdb.cursors.DictCursor)

  for i in xrange(0, nRows):
    linkT   = cursorLnk.fetchone()
    query   = "SELECT object_path, hash_id \
               FROM   xalt_object as xo, join_link_object as lo \
               WHERE  lo.obj_id = xo.obj_id \
               AND    lo.link_id = %s" % linkT["link_id"]
    cursorObj.execute(query)
    linkA = [ [ iRow["object_path"], iRow["hash_id"] ] \
              for iRow in cursorObj.fetchall() ]
    dateStr = time.strftime("%Y_%m_%d_%H_%M_%S",
                            time.localtime(float(linkT['build_epoch'])))
    resultT                  = {}
    resultT["uuid"]          = linkT["uuid"]
    resultT['link_program']  = linkT['link_program']
    resultT['build_user']    = linkT['build_user']
    resultT['exit_code']     = linkT['exit_code']
    resultT['build_epoch']   = linkT['build_epoch']
    resultT['exec_path']     = linkT['exec_path']
    resultT['hash_id']       = linkT['hash_id']
    resultT['wd']            = ''
    resultT['build_syshost'] = linkT['build_syshost']
    resultT['linkA']         = linkA
    key                      = "link.%s.%s.%s.json" % \
                               (linkT['build_syshost'], dateStr, linkT['uuid'])
    resultFn = os.path.join(outputdir, key)
    print("Writing: " + resultFn)
    xfer = XALT_transmission_factory.build("file", linkT['build_syshost'], "link", resultFn)
    xfer.save(resultT, key)


def export_runs(conn, syshost, startDate, endDate, outputdir):
  cursorRun = conn.cursor(MySQLdb.cursors.DictCursor)
  query     = "SELECT * \
               FROM   xalt_run \
               WHERE  syshost like %s \
               AND    date >= %s AND date < %s"
  
  cursorRun.execute(query, (syshost, startDate, endDate))
  nRows     = cursorRun.rowcount
  cursorObj = conn.cursor(MySQLdb.cursors.DictCursor)

  for i in xrange(0, nRows):
    runT    = cursorRun.fetchone()
    query   = "SELECT object_path, hash_id \
               FROM   xalt_object as xo, join_run_object as ro \
               WHERE  ro.obj_id = xo.obj_id \
               AND    ro.run_id = %s" % runT["run_id"]
    cursorObj.execute(query)
    libA    = [ [ iRow["object_path"], iRow["hash_id"] ] \
                for iRow in cursorObj.fetchall() ]
    dateStr = time.strftime("%Y_%m_%d_%H_%M_%S",
                            time.localtime(float(runT['start_time'])))
    userT                   = {}
    userT["currentEpoch"]   = float(runT["start_time"])
    userT["cwd"]            = runT["cwd"]
    userT["end_time"]       = float(runT["end_time"])
    userT["execModify"]     = 0
    userT["exec_epoch"]     = 0
    userT["exec_path"]      = runT["exec_path"]
    userT["exec_type"]      = runT["exec_type"]
    userT["exit_status"]    = 0
    userT["num_tasks"]      = runT["num_cores"]
    userT["num_threads"]    = runT["num_threads"]
    userT["run_time"]       = runT["run_time"]
    userT["run_uuid"]       = runT["run_uuid"]
    userT["start_date"]     = ""
    userT["start_time"]     = float(runT["start_time"])
    userT["syshost"]        = runT["syshost"]
    userT["user"]           = runT["user"]

    resultT                 = {}
    xaltLinkT               = {}
    xaltLinkT["Build.UUID"] = runT["uuid"]
    resultT["cmdlineA"]     = []
    resultT["envT"]         = {}
    resultT["hash_id"]      = runT["hash_id"]
    resultT["libA"]         = libA
    resultT["userT"]        = userT
    resultT["xaltLinkT"]    = xaltLinkT
    key                     = "run.%s.%s.%s.json" % \
                              (runT["syshost"], dateStr, runT['run_uuid'])

    resultFn = os.path.join(outputdir, key)
    xfer     = XALT_transmission_factory.build("file", runT['syshost'], "run", resultFn)
    print("Writing: " + resultFn)
    xfer.save(resultT, key)
    

def main():
  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  args         = CmdLineOptions().execute()
  config       = configparser.ConfigParser()     
  configFn     = os.path.join(XALT_ETC_DIR,args.confFn)
  config.read(configFn)

  conn = MySQLdb.connect              \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")), \
          config.get("MYSQL","DB"))
  
  startDate = args.startDate
  endDate   = args.endDate
  syshost   = args.syshost
  outputdir = args.outputdir
  export_runs( conn, syshost, startDate, endDate, outputdir)
  export_links(conn, syshost, startDate, endDate, outputdir)
  
if ( __name__ == '__main__'): main()
  
